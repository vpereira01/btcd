# commands definitions
DOCKER := docker
GO := go

# targets definitions
BTCD_BUILDCONTEXT := ./..
BTCD_DOCKERFILE := image/btcd-dockertests.Dockerfile
BTCD_IMAGENAME := btcd-dockertests

# print setup
GREEN := "\\033[0;32m"
NC := "\\033[0m"
define print
	echo $(GREEN)$1$(NC)
endef

# defaults
default: dimage

all: dimage test

# ============
# DEPENDENCIES
# ============

$(DOCKER):
	docker --version

$(GO):
	go version

# ============
# BUILD
# ============

# Build btcd docker image
dimage: $(DOCKER)
	@$(call print, "Building all docker images")
	$(DOCKER) build $(BTCD_BUILDCONTEXT) -f $(BTCD_DOCKERFILE) -t $(BTCD_IMAGENAME)

# =======
# TESTING
# =======

check: test

test: $(DOCKER)
	@$(call print, "Running tests.")
	$(GO) test -v -test.timeout=20m

# =========
# UTILITIES
# =========

# Stops running containers that might be left running and remove their images
drm: $(DOCKER)
	@$(call print, "List running containers.$(NC)")
	$(DOCKER) ps -q --filter ancestor=$(BTCD_IMAGENAME)
	@$(call print, "Try to stop running containers.$(NC)")
	$(DOCKER) stop $$($(DOCKER) ps -q --filter ancestor=$(BTCD_IMAGENAME) ) || true
	@$(call print, "Remove btcd images.$(NC)")
	$(DOCKER) image rm $(BTCD_IMAGENAME)

# Prune unused docker artefacts that could be generated by the tests
dprune: $(DOCKER)
	@$(call print, "Prune containers.$(NC)")
	$(DOCKER) container prune -f
	@$(call print, "Prune images.$(NC)")
	$(DOCKER) image prune -f
	@$(call print, "Prune networks.$(NC)")
	$(DOCKER) network prune -f
	@$(call print, "Prune volumes.$(NC)")
	$(DOCKER) volume prune -f

.PHONY: all \
	default \
	dimage \
	check \
	test \
	drm \
	dprune